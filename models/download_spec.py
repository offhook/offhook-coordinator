# coding: utf-8

from __future__ import absolute_import
from typing import List, Dict  # noqa: F401
from .base_model_ import Model
from . import util


class DownloadSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, source=None, os=None, os_variant=None, architecture=None, packages=None):  # noqa: E501
        """DownloadSpec - a model defined in Swagger

        :param source: The source of this DownloadSpec.  # noqa: E501
        :type source: str
        :param os: The os of this DownloadSpec.  # noqa: E501
        :type os: str
        :param os_variant: The os_variant of this DownloadSpec.  # noqa: E501
        :type os_variant: str
        :param architecture: The architecture of this DownloadSpec.  # noqa: E501
        :type architecture: str
        :param packages: The packages of this DownloadSpec.  # noqa: E501
        :type packages: List[str]
        """
        self.swagger_types = {
            'source': str,
            'os': str,
            'os_variant': str,
            'architecture': str,
            'packages': List[str]
        }

        self.attribute_map = {
            'source': 'source',
            'os': 'os',
            'os_variant': 'osVariant',
            'architecture': 'architecture',
            'packages': 'packages'
        }

        self._source = source
        self._os = os
        self._os_variant = os_variant
        self._architecture = architecture
        self._packages = packages

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DownloadSpec of this DownloadSpec.  # noqa: E501
        :rtype: DownloadSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source(self):
        """Gets the source of this DownloadSpec.


        :return: The source of this DownloadSpec.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DownloadSpec.


        :param source: The source of this DownloadSpec.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def os(self):
        """Gets the os of this DownloadSpec.


        :return: The os of this DownloadSpec.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this DownloadSpec.


        :param os: The os of this DownloadSpec.
        :type os: str
        """
        if os is None:
            raise ValueError("Invalid value for `os`, must not be `None`")  # noqa: E501

        self._os = os

    @property
    def os_variant(self):
        """Gets the os_variant of this DownloadSpec.


        :return: The os_variant of this DownloadSpec.
        :rtype: str
        """
        return self._os_variant

    @os_variant.setter
    def os_variant(self, os_variant):
        """Sets the os_variant of this DownloadSpec.


        :param os_variant: The os_variant of this DownloadSpec.
        :type os_variant: str
        """

        self._os_variant = os_variant

    @property
    def architecture(self):
        """Gets the architecture of this DownloadSpec.


        :return: The architecture of this DownloadSpec.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this DownloadSpec.


        :param architecture: The architecture of this DownloadSpec.
        :type architecture: str
        """

        self._architecture = architecture

    @property
    def packages(self):
        """Gets the packages of this DownloadSpec.


        :return: The packages of this DownloadSpec.
        :rtype: List[str]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this DownloadSpec.


        :param packages: The packages of this DownloadSpec.
        :type packages: List[str]
        """
        if packages is None:
            raise ValueError("Invalid value for `packages`, must not be `None`")  # noqa: E501

        self._packages = packages
